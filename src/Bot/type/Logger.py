from typing import Union

CRITICAL : int
ERROR    : int
WARNING  : int
INFO     : int
DEBUG    : int
NOSET    : int

_levelToName : dict[int, str]
_nameToLevel : dict[str, int]
_nameToColor : dict[str, int]

class Logger:
    def __init__(self, name: str = 'Logger')                            -> None:...
    def _save(self, text: str, level: int, max: int = 10)               -> None:...
    def _print(self, text: str, level: int, *args, **kwargs)            -> None:...
    def Critical(self, text: str, *args, **kwargs)                      -> None:...
    def Error(self, text: str, *args, **kwargs)                         -> None:...
    def Warn(self, text: str, *args, **kwargs)                          -> None:...
    def Info(self, text: str, *args, **kwargs)                          -> None:...
    def Debug(self, text: str, *args, **kwargs)                         -> None:...
    def NoSet(self, text: str, *args, **kwargs)                         -> None:...
    def getLevel(self, level: Union[str, int])                          -> str:...
    def color(self, level: str)                                         -> str:...
    def time(self)                                                      -> str:...
    def status(self, level: Union[int, str], max: int = 10)             -> str:...

def Log(level: int = 0, text: str = '', _exit: bool = False, **options) -> None:...
